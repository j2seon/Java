package Chap06_07.Ex03;

//기본생성자 : class A는 기본생성자가 생략되어 있다.
//일반적으로 클래스 블락에 필드, 생성자,메소드 형식으로 작성.
//생성자의 역할 : 객체 생성, 필드의 값을 초기화

class A{
	int m; //필드(클래스 블럭에 선언된 변수) : 데이터 타입
			//힙 영역에 저장, 객체화 시켜야 사용 가능, 예외: static사용 시 객체 없어도 접근가능)
			//힙 영역의 ram에는 반드시 초기값이 들어가야한다.
//	A(){}   // <== 기본 생성자 : 클래스 이름과 동일하면서 리턴타입이 없는 메소드를 생성자라한다.
			//기본생성자는 생략가능하다.
			//기본생성자는 매개변수도 없고, 실행부도 가지지 않는 산
	void work() { //메소드 : 리턴타입 메소드명(인풋매개변수){ 실행하는 실행부 }
					//메소드 호출 : work()
		
	System.out.println(m); //메모의 값을 가지고 오는 것.
	}
}

class B{
	int m; //m은 Heap 영역에 저장이 되고, 기본 값으로 0을 출력.
	B(){}  //기본생성자는 생략가능하다,객체의 필드의 초기값을 기본값으로 출력
	
	void work() {
		System.out.println(m); //0 메모리의 초기값으로 0을 출력
	}
}

class C{
	int m;
 // C(){}기본생성자는 생략됨, 클래스 내부에 다른 생성자가 존재하는 경우 외부에서 기본 생성자 호출시
	//기본생성자는 생략되면 안된다.
	C(int c){ //생성자의 인풋값을 받아서 메모리의 기본값으로 값을 오드 시킨다.
		m=c;
	}
	void work() {
		System.out.println(m); //m은 객체 생성시 생성자에 정수 값을 넣어서 필드 m을 초기화 시켜줌.
	}
}
class D{
	int m, n, l;
	D(){}				//기본생성자
	D(int m, int n){
		this.m=m;	//this : 자기자신의 객체, 지역변수가 아니라 필드의 변수를 알려줌
		this.n=n;
		
	}
	D(int a, int b, int c){ //매개변수가 3개인 생성자
		m=a;
		n=b;
		l=c;
	}
	void work() {	//work()를 호출시 각각의 메모리 값을 출력
		System.out.println("m : "+ m+",n : "+n+"l : " +l);
	}
}

public class DefaultConstructor {

	public static void main(String[] args) {
		//클래스 내에  포함될 수 있는 것 : 필드, 메소드, 생성자,이너클래스 
		/*생성자의 2가지 특징 : 1. 클래스 이름과 동일한 이름을 가진 메소드를 생성자라 한다.
						  2. 생성자는 반환타입이 없다.(메소드는 반환타입이 있다.)
 		생성자를 사용하는 이유 : 객체를 생성할때 필드의 값을 초기화 하면서 객체를 생성하고자 할때 사용.
		클래스내에서 필드의 초기값은 일반적으로 할당하지 않음.
		클래스의 객체를 생성할때 초기 값을 할당하면서 객체를 생성할 때 
		*/
		//객체를 생성할 때, 반드시 생성자를 호출, A a =new A();<==객체 생성구문 
		//기본 생성자(Default constructor): 생략가능
	    //인픗 매개변수가 없는 생성자, 실행부의 값도 비어있는 상태의 생성자.
		// 생략되어 있을 경우, 컴파일러가 자동으로 생성해서 컴파일.
		// 클래스 내의 기본생성자 이외의 다른 생성자가 존재하는 경우, 기본 생성자 호출시 생략되면 안된다.

		A a = new A(); //A() : 기본 생성자 호출
					// 객체생성시 반드시 생성자를 호출해야한다.
		a.work();
		
		B b= new B(); //기본생성자호출
		
		b.work(); //객체의 초기값 출력:
		
		C c=new C(3); // 생성자 호출시 기본값을 인풋해서 메모리 필드에 초기값 구성
		c.work();	  // 객체 생성시 기본 기능 : 객체 생성과 + 필드의 값을 초기화 시킴  
		
		C cc=new C(5);
		cc.work();
		//class C는 기본생성자가 생략 되어 있다.
		//class C는 인풋매개변수가 하나인 생성자가 존재
		//C cccc = new C(); //오류 : 기본생성자가 생략, 다른생성자가 있어서 기본생성자를 적어줘야야한다.
		
		D d= new D(); //기본생성자 호출, 객체의 필드의 초기값(m:0,n:0,l:0)
		
		D dd =new D(3,4,5); //매개변수가 정수 3개인 생성자 호출
		dd.work();
		//생성자 : 메소드 이름이 객체이름과 리턴값이 없는 메소드
		//객체 내의 필드의 값을 초기화하는 오버로딩 (Overloding)에 의해서 해당 생성자가 호출
			//오버로딩 : 메소드 명(생성자 명, 데이터 타입,매개변수 갯수) <==시그니처
			//오류가 발생되는 경우 : 동일한 데이터 타입과 갯수가 동일한 경우 
		D ddd= new D(1,2); //매개변수가 정수 2개인 생성자를 호출
		ddd.work();
		
		
	}
}
